<?php
//Define interface class for router
use \Psr\Http\Message\ServerRequestInterface as Request;        //PSR7 ServerRequestInterface   >> Each router file must contains this
use \Psr\Http\Message\ResponseInterface as Response;            //PSR7 ResponseInterface        >> Each router file must contains this

//Define your modules class
use \modules\tiki\Tiki as Tiki;   //Your main modules class

//Define additional class for any purpose
use \classes\middleware\ValidateParamURL as ValidateParamURL;   //ValidateParamURL              >> To validate the query parameter url
use \classes\middleware\ApiKey as ApiKey;                       //ApiKey Middleware             >> To authorize request by using ApiKey generated by reSlim
use \classes\SimpleCache as SimpleCache;                        //SimpleCache class             >> To cache response ouput server side


    // Get module information
    $app->map(['GET','POST','OPTIONS'],'/tiki/get/info/', function (Request $request, Response $response) {
        $fc = new Tiki($this->db);
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag2hour.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        $body->write($fc->viewInfo());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ApiKey);


    //TIKI======================================================

    // GET api for info connote
    $app->map(['GET','POST','OPTIONS'],'/tiki/info/{connote}/', function (Request $request, Response $response) {
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(300,["apikey","lang"])){
            $datajson = SimpleCache::load(["apikey","lang"]);
        } else {
            $tiki = new Tiki($this->db);
            $tiki->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
            $tiki->connote = $request->getAttribute('connote');
            $datajson = SimpleCache::save($tiki->infoConnote(),["apikey","lang"]);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))
        ->add(new ApiKey);

    // GET api for history connote
    $app->map(['GET','POST','OPTIONS'],'/tiki/history/{connote}/', function (Request $request, Response $response) {
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(300,["apikey","lang"])){
            $datajson = SimpleCache::load(["apikey","lang"]);
        } else {
            $tiki = new Tiki($this->db);
            $tiki->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
            $tiki->connote = $request->getAttribute('connote');
            $datajson = SimpleCache::save($tiki->historyConnote(),["apikey","lang"]);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))
        ->add(new ApiKey);

    // GET api for status code
    $app->map(['GET','POST','OPTIONS'],'/tiki/statuscode/', function (Request $request, Response $response) {
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(86400,["apikey","lang"])){
            $datajson = SimpleCache::load(["apikey","lang"]);
        } else {
            $tiki = new Tiki($this->db);
            $tiki->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
            $datajson = SimpleCache::save($tiki->statusCode(),["apikey","lang"]);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))
        ->add(new ApiKey);

    // GET api for area info
    $app->map(['GET','POST','OPTIONS'],'/tiki/areainfo/', function (Request $request, Response $response) {
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(86400,["apikey","lang","query"])){
            $datajson = SimpleCache::load(["apikey","lang","query"]);
        } else {
            $tiki = new Tiki($this->db);
            $tiki->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
            $tiki->search = (empty($_GET['query'])?'':$_GET['query']);
            $datajson = SimpleCache::save($tiki->getArea(),["apikey","lang","query"]);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('query'))
        ->add(new ValidateParamURL('lang','0-2'))
        ->add(new ApiKey);

    // GET api for tariff product
    $app->map(['GET','POST','OPTIONS'],'/tiki/tariff/{origin}/{destination}/{weight}/', function (Request $request, Response $response) {
        $body = $response->getBody();
        $response = $this->cache->withEtag($response, $this->etag.'-'.trim($_SERVER['REQUEST_URI'],'/'));
        if (SimpleCache::isCached(300,["apikey","lang"])){
            $datajson = SimpleCache::load(["apikey","lang"]);
        } else {
            $tiki = new Tiki($this->db);
            $tiki->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
            $tiki->origin = $request->getAttribute('origin');
            $tiki->destination = $request->getAttribute('destination');
            $tiki->weight = $request->getAttribute('weight');
            $datajson = SimpleCache::save($tiki->product(),["apikey","lang"]);
        }
        $body->write($datajson);
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))
        ->add(new ApiKey);


    // GET api to get token
    $app->map(['GET','POST','OPTIONS'],'/tiki/token/', function (Request $request, Response $response) {
        $tiki = new Tiki($this->db);
        $tiki->lang = (empty($_GET['lang'])?$this->settings['language']:$_GET['lang']);
        $body = $response->getBody();
        $body->write($tiki->token());
        return classes\Cors::modify($response,$body,200,$request);
    })->add(new ValidateParamURL('lang','0-2'))
        ->add(new ApiKey);